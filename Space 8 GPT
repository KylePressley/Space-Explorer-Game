import random

class Planet:
    def __init__(self, climate, resources, water, animals, plants):
        self.climate = climate
        self.resources = resources
        self.water = water
        self.animals = animals
        self.plants = plants
        self.explored = False  # Tracks if the planet has been explored before

class SolarSystem:
    def __init__(self):
        self.planets = [Planet(random.randint(1, 10), random.randint(1, 10), random.randint(1, 10), random.randint(1, 10), random.randint(1, 10)) for _ in range(random.randint(1, 20))]
        self.current_planet_index = 0

class Player:
    def __init__(self):
        self.resources = 0
        self.materials = []
        self.health = 100

def generate_solar_system():
    return SolarSystem()

def explore_planet(player, solar_system):
    current_planet = solar_system.planets[solar_system.current_planet_index]
    print(f"\nExploring planet {solar_system.current_planet_index + 1}...")

    # Hint at an attribute if exploring for the first time
    if not current_planet.explored:
        hint_attribute = random.choice(["climate", "resources", "water", "animals", "plants"])
        hint_value = getattr(current_planet, hint_attribute)
        print(f"Hint: This planet's {hint_attribute} is {hint_value}.")
        current_planet.explored = True

    # Show current planet's full attributes
    print(f"Climate: {current_planet.climate}")
    print(f"Resources: {current_planet.resources}")
    print(f"Water: {current_planet.water}")
    print(f"Animals: {current_planet.animals}")
    print(f"Plants: {current_planet.plants}")

    if current_planet.resources > 0:
        harvest_amount = random.randint(1, current_planet.resources)
        player.resources += harvest_amount
        player.materials.append(f"{harvest_amount} of planet {solar_system.current_planet_index + 1} resources")
        current_planet.resources -= harvest_amount  # Deplete the planet's resources
        print(f"Harvested {harvest_amount} resources. Remaining resources: {current_planet.resources}.")
    else:
        print("This planet has no more resources to harvest.")

    # Calculate health decrease based on planet conditions
    health_decrease = (10 - current_planet.climate) + (10 - current_planet.water) + (10 - current_planet.animals) + (10 - current_planet.plants)
    player.health -= health_decrease
    print(f"Health decreased by {health_decrease}. Current health: {player.health}")

def move_to_next_planet(player, solar_system):
    solar_system.current_planet_index += 1
    # Check if there are more planets to explore
    if solar_system.current_planet_index >= len(solar_system.planets):
        print("No more planets to explore in this solar system.")
        solar_system.current_planet_index = len(solar_system.planets) - 1  # Reset index to the last planet
    else:
        # Decrease health for traveling to another planet
        travel_cost = random.randint(5, 15)
        player.health -= travel_cost
        print(f"Traveled to the next planet. Health decreased by {travel_cost}. Current health: {player.health}")

def display_inventory(player):
    print("\nInventory:")
    if player.materials:
        for material in player.materials:
            print(f"  {material}")
    else:
        print("  No materials collected yet.")
    print(f"Current Health: {player.health}")
    print(f"Total Resources: {player.resources}")

def play_game():
    # Print the introductory story
    print("""
    A distant hum vibrates through the ship, followed by a jolt that sends you tumbling forward. Your eyes snap open, and you find yourself staring at the blinking red lights of the ship's emergency systems. A quick scan of the console reveals the devastating news: your star jump booster has malfunctioned. You're stranded, light-years from home, in an unknown solar system.

    Your heart pounds in your chest. The thought of being stranded, alone and helpless, sends a shiver down your spine. You glance at the medical scanner, which shows your health levels are critically low. The malfunction has taxed your life support systems, leaving you vulnerable to the harsh conditions of this alien world.

    Your family, back on Earth, is waiting for you. They have no idea where you are or what has happened. You must find a way to jump back at lightspeed, even if it means risking everything. The fate of your mission, and perhaps your life, now rests in your hands.
    """)

    player = Player()
    solar_system = generate_solar_system()

    # Display initial inventory and health
    display_inventory(player)

    while True:
        print("\n1. Explore current planet")
        print("2. Move to next planet (risk of finding nothing)")
        print("3. Check inventory and health")
        choice = input("Choose an action: ")

        if choice == "1":
            explore_planet(player, solar_system)
        elif choice == "2":
            move_to_next_planet(player, solar_system)
        elif choice == "3":
            display_inventory(player)
        else:
            print("Invalid choice. Please choose a valid option.")

        # Check if player has enough resources to build the engine or if health is depleted
        if player.resources >= 100:
            print("\nCongratulations! You have enough resources to build a lightspeed engine.")
            break
        if player.health <= 0:
            print("\nGame over! Your health has reached zero.")
            break

def main():
    while True:
        play_game()
        restart = input("\nWould you like to play again? (yes/no): ").lower()
        if restart != 'yes':
            print("Thanks for playing! Safe travels, space explorer.")
            break

if __name__ == "__main__":
    main()